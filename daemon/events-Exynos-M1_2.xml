<counter_set count="6" name="ARMv8_Exynos_M1_cnt"/>
<category counter_set="ARMv8_Exynos_M1_cnt" name="Exynos-M1/M2" per_cpu="yes" supports_event_based_sampling="yes">
    <event counter="ARMv8_Exynos_M1_ccnt" event="0x11" title="Cycles" name="CPU Cycles" description="The counter increments on every cycle." display="hertz" units="Hz" average_selection="yes" average_cores="yes"/>
    <event event="0x0" title="Instructions (Executed)" name="Increment PMSWINC Register" description="The counter increments on writes to the PMSWINC register." units="instructions"/>
    <event event="0x1" title="L1 Instruction Cache" name="Refill" description="The counter counts each access counted by &apos;L1 Instruction Cache: Access&apos; that causes a demand refill of any of the Level 1 caches outside the Level 1 caches of this PE. A refill includes any access that causes data to be fetched from outside the cache, even if the data is ultimately not allocated into the cache. For example, data might be fetched into a buffer but then discarded, rather than being allocated into a cache. These buffers are treated as part of the cache. If the cache is shared, only events attributable to this PE are counted. If the cache is not shared, all events are counted."/>
    <event event="0x2" title="L1 Instruction TLB" name="Refill" description="The counter counts attributable instruction memory accesses that cause a TLB refill of at least the Level 1 instruction TLB. This includes each Instruction memory access that causes an access to a level of memory system due to a translation table walk or an access to another level of TLB caching."/>
    <event event="0x3" title="L1 Data Cache" name="Refill" description="The counter counts each access counted by &apos;L1 Data Cache: Access&apos; that causes a demand refill of at least the Level 1 data or unified cache from outside the Level 1 cache. Each access to a cache line that causes a new linefill is counted, including those from instructions that generate multiple accesses, such as load or store multiples, and PUSH and POP instructions. In particular, the counter counts accesses to the Level 1 cache that cause a refill that is satisfied by another Level 1 data or unified cache, or a Level 2 cache, or memory. A refill includes any access that causes data to be fetched from outside the cache, even if the data is ultimately not allocated into the cache. For example, data might be fetched into a buffer but then discarded, rather than being allocated into a cache. These buffers are treated as part of the cache."/>
    <event event="0x4" title="L1 Data Cache" name="Access" description="The counter counts each memory read operation or memory write operation that causes a cache access to at least the Level 1 data or unified cache. If the cache is shared, only events attributable to this PE are counted. If the cache is not shared, all events are counted. Each access to a cache line is counted including the multiple accesses of instructions, such as LDM or STM . Each access to other Level 1 data or unified memory structures, for example refill buffers, write buffers, and write-back buffers, is also counted."/>
    <event event="0x5" title="L1 Data TLB" name="Refill" description="The counter counts each attributable memory read operation or attributable memory write operation that causes a TLB refill of at least the Level 1 data or unified TLB. It counts each read or write that causes a refill, in the form of a translation table walk or an access to another level of TLB caching."/>
    <event event="0x6" title="Instructions (Executed)" name="Load" description="The counter increments for every executed memory-reading instruction." units="instructions"/>
    <event event="0x7" title="Instructions (Executed)" name="Store" description="The counter increments for every executed memory-writing instruction. DC ZVA is counted as a store. The counter does not increment for a Store-Exclusive instruction that fails." units="instructions"/>
    <event event="0x8" title="Instructions (Executed)" name="All" description="The counter increments for every architecturally executed instruction." units="instructions"/>
    <event event="0x9" title="Exceptions" name="Taken" description="The counter increments for each exception taken." units="exceptions"/>
    <event event="0xa" title="Instructions (Executed)" name="Exception Returns" description="The counter increments for each executed exception return instruction." units="instructions"/>
    <event event="0xb" title="Instructions (Executed)" name="Write to CONTEXTIDR" description="The counter increments for every write to the CONTEXTIDR." units="instructions"/>
    <event event="0xc" title="Instructions (Executed)" name="Write to PC" description="The counter increments for every software change of the PC. This includes all: Branch instructions, memory reading instructions that explicitly write to the PC, Data processing instructions that explicitly write to the PC, and Exception return instructions." units="instructions"/>
    <event event="0xd" title="Instructions (Executed)" name="Branch (Immediate)" description="The counter counts all immediate branch instructions that are architecturally executed." units="instructions"/>
    <event event="0xe" title="Instructions (Executed)" name="Branch (Return)" description="The counter counts all procedure return instructions that are architecturally executed." units="instructions"/>
    <event event="0xf" title="Instructions (Executed)" name="Unaligned Load/Store" description="The counter counts each memory-reading instruction or memory-writing instruction access that would generate an Alignment fault when Alignment fault checking is enabled." units="instructions"/>
    <event event="0x10" title="Branch Predictor" name="Mispredictions" description="The counter counts each correction to the predicted program flow that occurs because of a misprediction from, or no prediction from, the branch prediction resources and that relates to instructions that the branch prediction resources are capable of predicting."/>
    <event event="0x12" title="Branch Predictor" name="Possible Predictions" description="The counter counts every branch or other change in the program flow that the branch prediction resources are capable of predicting."/>
    <event event="0x13" title="Memory" name="Access" description="The counter counts memory read operations and memory write operations that the PE made. The counter increments whether the access results in an access to a Level 1 data or unified cache, a Level 2 data or unified cache, or neither of these."/>
    <event event="0x14" title="L1 Instruction Cache" name="Access" description="The counter counts attributable instruction memory accesses that access at least the Level 1 instruction or unified cache. Each access to other Level 1 instruction memory structures, such as refill buffers, is also counted."/>
    <event event="0x15" title="L1 Data Cache" name="Write-back" description="The counter counts every write-back of data from the Level 1 data or unified cache. The counter counts each write-back that causes data to be written from the Level 1 cache to outside of the Level 1 cache."/>
    <event event="0x16" title="L2 Data Cache" name="Access" description="The counter counts each memory read operation or memory write operation that causes a cache access to at least the Level 2 data or unified cache. If the cache is shared, only events attributable to this PE are counted. If the cache is not shared, all events are counted."/>
    <event event="0x17" title="L2 Data Cache" name="Refill" description="The counter counts each access counted by &apos;L2 Data Cache: Access&apos; that causes a refill of any of the Level 1 or Level 2 caches from outside the Level 1 and Level 2 caches of the PE. A refill includes any access that causes data to be fetched from outside the cache, even if the data is ultimately not allocated into the cache. For example, data might be fetched into a buffer but then discarded, rather than being allocated into a cache. These buffers are treated as part of the cache."/>
    <event event="0x18" title="L2 Data Cache" name="Write-back" description="The counter counts every write-back of data from the Level 2 data or unified cache that occurs as a result of an operation by this PE. It counts each write-back that causes data to be written from the Level 2 cache to outside the Level 1 and Level 2 caches."/>
    <event event="0x19" title="Bus" name="Access" description="The counter counts memory read operations and memory write operations that access outside of the boundary of the PE and its closely-coupled caches. Where this boundary lies with respect to any implemented caches is IMPLEMENTATION DEFINED."/>
    <event event="0x1a" title="Errors" name="Memory" description="The counter counts every occurrence of a memory error signaled by a memory closely coupled to this PE. The definition of local memories is IMPLEMENTATION DEFINED but includes caches, tightly-coupled memories, and TLB arrays."/>
    <event event="0x1b" title="Instructions (Speculated)" name="All" description="The counter counts instructions that are speculatively executed by the PE. This includes instructions that are subsequently not architecturally executed." units="instructions"/>
    <event event="0x1c" title="Instructions (Executed)" name="Write to TTBR" description="The counter counts writes to the translation table base registers, TTBR0 and TTBR1." units="instructions"/>
    <event event="0x1d" title="Cycles" name="Bus Cycles" description="The counter increments on every cycle of the interface at the boundary of the PE and its closely-coupled caches. Where this boundary lies with respect to any implemented caches is IMPLEMENTATION DEFINED."/>
    <event event="0x1f" title="L1 Data Cache" name="Allocation without refill" description="The counter increments on every attributable write that writes an entire line into the Level 1 cache without fetching from outside the Level 1 cache."/>
    <event event="0x20" title="L2 Data Cache" name="Allocation without refill" description="The counter increments on every attributable write that writes an entire line into the Level 2 cache without fetching from outside the Level 1 or Level 2 caches"/>
</category>
