/* Useful resources:
 * - https://www.jenkins.io/doc/book/pipeline/syntax
 * - http://docs.groovy-lang.org/latest/html/documentation
 */

pipeline {
    agent {
        label 'lightweight'
    }
    environment {
        GERRIT_CREDENTIALS_ID = "gpuddkci-eu-gerrit-1-http"
        GERRIT_HOST = "eu-gerrit-1.euhpc.arm.com"
        GERRIT_NAME = "ce-gpu-gerrit"
    }
    stages {
        stage("Checkout") {
            environment {
                GIT_SSH_COMMAND = "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l upr473"
            }
            steps {
                dir(path: "${WORKSPACE}/${BUILD_NUMBER}") {
                    script {
                        gerritReview(
                            message: "Build starting, ${BUILD_URL}",
                            labels: [Verified: 0]
                        )
                    }
                    checkout([$class: 'GitSCM',
                              branches: [[name: '$GERRIT_BRANCH']],
                              doGenerateSubmoduleConfigurations: false,
                              extensions: [[$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']],
                                           [$class: 'CloneOption', timeout: 100, honorRefspec: true]],
                              submoduleCfg: [],
                              userRemoteConfigs: [[credentialsId: 'gpuswci-eu-gerrit-1-ssh',
                                                   refspec: '$GERRIT_REFSPEC',
                                                   url: 'ssh://mirror.eu-west-1.gerrit-eu01.aws.arm.com:29418/GPU-SW/RDT/hwcpipe2']]])
                }
            }
        }
        stage("pre-commit checkers") {
            agent {
                docker {
                    image "gpuddk/hwcpipe2-pre-commit:latest"
                    registryUrl "${DOCKER_GPUDDK_REGISTRY}"
                    registryCredentialsId 'gpuddkci-artifactory'
                    label 'lightweight'
                    alwaysPull true
                    reuseNode true
                }
            }
            stages {
                stage("commitlint") {
                    steps {
                        dir(path: "${WORKSPACE}/${BUILD_NUMBER}") {
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                sh(
                                    script: "./tools/ci/run-commitlint HEAD",
                                    label: "Running 'commitlint'"
                                )
                            }
                        }
                    }
                }
                stage("pre-commit") {
                    steps {
                        dir(path: "${WORKSPACE}/${BUILD_NUMBER}") {
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                sh(
                                    script: "pre-commit run --all-files",
                                    label: "Running 'pre-commit'"
                                )
                            }
                        }
                    }
                }
            }
        }
        stage("generator") {
            agent {
                docker {
                    image "gpuddk/hwcpipe2-pre-commit:latest"
                    registryUrl "${DOCKER_GPUDDK_REGISTRY}"
                    registryCredentialsId 'gpuddkci-artifactory'
                    label 'lightweight'
                    alwaysPull true
                    reuseNode true
                }
            }
            stages {
                stage("unittests") {
                    steps {
                        dir(path: "${WORKSPACE}/${BUILD_NUMBER}/device/gen/ioctl_idlc") {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    sh(
                                        script: "python3 -m unittest",
                                        label: "Running generator unit tests."
                                    )
                            }
                        }
                    }
                }
                stage("check generated files") {
                    steps {
                        dir(path: "${WORKSPACE}/${BUILD_NUMBER}/device/gen") {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    sh(
                                        script: "python3 generate_all.py --check-no-changes",
                                        label: "Checking if generated files are up to date."
                                    )
                            }
                        }
                    }
                }
            }
        }
        stage("docs") {
            agent {
                docker {
                    image "gpuddk/hwcpipe2:latest"
                    registryUrl "${DOCKER_GPUDDK_REGISTRY}"
                    registryCredentialsId 'gpuddkci-artifactory'
                    label 'lightweight'
                    alwaysPull true
                    reuseNode true
                }
            }
            steps {
                echo 'Building docs'
                dir(path: "${WORKSPACE}/${BUILD_NUMBER}") {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        sh(script: "doxygen")
                    }
                }
            }
        }
        stage("build and test") {
            matrix {
                agent {
                    docker {
                        image "gpuddk/hwcpipe2:latest"
                        registryUrl "${DOCKER_GPUDDK_REGISTRY}"
                        registryCredentialsId 'gpuddkci-artifactory'
                        label 'lightweight'
                        alwaysPull true
                        reuseNode true
                    }
                }
                axes {
                    axis {
                        name 'TOOLCHAIN'
                        values 'clang', 'gcc'
                    }
                    axis {
                        name 'OS'
                        values 'linux', 'android'
                    }
                    axis {
                        name 'ARCH'
                        values 'x86', 'x64', 'arm', 'arm64'
                    }
                }
                excludes {
                    exclude {
                        axis {
                            name 'TOOLCHAIN'
                            values 'gcc'
                        }
                        axis {
                            name 'OS'
                            values 'android'
                        }
                    }
                    exclude {
                        axis {
                            name 'ARCH'
                            values 'x86', 'x64'
                        }
                        axis {
                            name 'OS'
                            values 'android'
                        }
                    }
                }
                environment {
                    BUILD_DIR = "out/${OS}_${TOOLCHAIN}_profile_${ARCH}"
                }
                stages {
                    stage("configure") {
                        steps {
                            echo 'configuring ${BUILD_DIR}'
                            dir(path: "${WORKSPACE}/${BUILD_NUMBER}") {
                                sh(script: "build/cmake.py generate " +
                                   "--os ${OS} " +
                                   "--arch ${ARCH} " +
                                   "--toolchain ${TOOLCHAIN} " +
                                   "--build-type profile " +
                                   "--build-dir ${BUILD_DIR} " +
                                   "-- " +
                                   "-DCMAKE_EXPORT_COMPILE_COMMANDS=YES"
                                )
                            }
                        }
                    }
                    stage("build") {
                        steps {
                            echo 'Building ${BUILD_DIR}'
                            dir(path: "${WORKSPACE}/${BUILD_NUMBER}") {
                                sh(script: "cmake --build ${BUILD_DIR}")
                            }
                        }
                    }
                    stage("clang-tidy") {
                        when {
                            /* clang-tidy does not understand gcc's LTO flags for arm. */
                            expression { !(env.TOOLCHAIN == "gcc" && (env.ARCH == "arm" || env.ARCH == "arm64")) }
                        }
                        steps {
                            echo 'running clang-tidy for ${BUILD_DIR}'
                            dir(path: "${WORKSPACE}/${BUILD_NUMBER}") {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    sh(script: "run-clang-tidy -format -style file -p ${BUILD_DIR} .")
                                }
                            }
                        }
                    }
                    stage("test") {
                        when {
                            allOf {
                                expression { env.OS == "linux" }
                                expression { env.ARCH == "x64" || env.ARCH == "x86" }
                            }
                        }
                        steps {
                            echo 'Testing ${BUILD_DIR}'
                            dir(path: "${WORKSPACE}/${BUILD_NUMBER}") {
                                sh(script: "cmake --build ${BUILD_DIR} -- test")
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            dir(path: "${WORKSPACE}/${BUILD_NUMBER}") {
                script {
                    gerritReview(
                        message: "Build successful, ${BUILD_URL}",
                        labels: [Verified: 1]
                    )
                }
            }
        }
        failure {
            dir(path: "${WORKSPACE}/${BUILD_NUMBER}") {
                script {
                    gerritReview(
                        message: "Build failed, ${BUILD_URL}",
                        labels: [Verified: -1]
                    )
                }
            }
        }
        cleanup {
            cleanWs()
        }
    }
}
