{{#is_compound}}
{{#items}}
{{> print}}
{{/items}}
{{#is_struct}}
{{^has_union_field}}
std::ostream &operator<<(std::ostream &os, const {{full_name_cxx}} &value) {
    // clang-format off
    return os << "{{name}} {\n" //
              << debug::indent_level::push //
              {{#fields}}
              {{^meta.padding}}
              {{#type.is_array}}
              << debug::indent << ".{{name}} = " << debug::print_array(value.{{name}}) << ",\n" //
              {{/type.is_array}}
              {{#type.is_builtin}}
              {{#type.print_as}}
              << debug::indent << ".{{name}} = " << static_cast<{{type.print_as}}>(value.{{name}}) << ",\n" //
              {{/type.print_as}}
              {{^type.print_as}}
              << debug::indent << ".{{name}} = " << value.{{name}} << ",\n" //
              {{/type.print_as}}
              {{/type.is_builtin}}
              {{^type.is_array}}
              {{^type.is_builtin}}
              << debug::indent << ".{{name}} = " << value.{{name}} << ",\n" //
              {{/type.is_builtin}}
              {{/type.is_array}}
              {{/meta.padding}}
              {{/fields}}
              << debug::indent_level::pop //
              << debug::indent << "}"; //
    // clang-format on
}

{{/has_union_field}}
{{/is_struct}}
{{#is_union}}
// no `operator<<` for union {{full_name_cxx}}

{{/is_union}}
{{/is_compound}}
{{#is_enum}}
std::ostream &operator<<(std::ostream &os, {{full_name_cxx}} value) {
    switch (value) {
    {{#values}}
    {{^alias}}
    case {{full_name_cxx}}:
        return os << "{{name}}";
    {{/alias}}
    {{/values}}
    default:
        assert(!"Unknown enum value");
        {{#underlying_type.print_as}}
        return os << "<unknown = " << static_cast<{{underlying_type.print_as}}>(value) << ">";
        {{/underlying_type.print_as}}
        {{^underlying_type.print_as}}
        return os << "<unknown = " << static_cast<{{underlying_type.name}}>(value) << ">";
        {{/underlying_type.print_as}}
    }
}

{{/is_enum}}
{{#is_bitmask}}
std::ostream &operator<<(std::ostream &os, {{full_name_cxx}} value) {
    if (!value)
        return os << 0;

    {{#values}}
    if (!!(value & {{full_name_cxx}})) {
        value ^= {{full_name_cxx}};
        os << "{{name}}";
    }

    if (!!value)
        os << " | ";

    {{/values}}
    if (!!value) {
        assert(!"Unknown bits");
        {{#underlying_type.print_as}}
        os << std::hex << static_cast<{{underlying_type.print_as}}>(value);
        {{/underlying_type.print_as}}
        {{^underlying_type.print_as}}
        os << std::hex << static_cast<{{underlying_type.name}}>(value);
        {{/underlying_type.print_as}}
    }

    return os;
}

{{/is_bitmask}}
