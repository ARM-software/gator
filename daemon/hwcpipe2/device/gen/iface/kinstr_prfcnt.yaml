---
!ioctl-iface
name: kinstr_prfcnt
description: Kinstr performance counters ioctl interface.
number: 0xbf
code: |-
  namespace detail {

  /** Flex list type. */
  enum class flex_list_type : uint8_t {
      /** Enumeration type. */
      enumeration,
      /** Request type. */
      request,
      /** Metadata type. */
      metadata,
  };

  /** @return Flex list item type. */
  inline constexpr uint16_t flex_list_item_type(flex_list_type type, uint16_t subtype) {
      constexpr uint16_t type_mask = 0xf;
      constexpr uint16_t type_shift = 12;
      constexpr uint16_t subtype_mask = 0xfff;

      return ((static_cast<uint8_t>(type) & type_mask) << type_shift) | (subtype_mask & subtype);
  }
  } // namespace detail
items:
  - !constant
    name: api_version
    description: Kinstr performance counters ioctl interface version.
    type: !builtin uint16_t
    value: 0
  - !enum
    &block_type
    name: block_type
    description: Type of performance counter block.
    underlying_type: !builtin uint8_t
    values:
      - name: fe
        description: Front end.
      - name: tiler
        description: Tiler.
      - name: memory
        description: Memory system.
      - name: shader_core
        description: Shader core.
  - !enum
    &prfcnt_set
    name: prfcnt_set
    description: Type of performance counter block set.
    underlying_type: !builtin uint8_t
    values:
      - name: primary
        description: Primary.
      - name: secondary
        description: Secondary.
      - name: tertiary
        description: Tertiary.
  - !struct
    name: enum_item
    description: Performance counter enumeration item.
    items:
      - !enum &enum_item_type
        name: item_type
        description: Enumeration item type.
        underlying_type: !builtin uint16_t
        values:
          - name: "none"
            description: Sentinel value.
            value: 0
            alias: yes
          - name: block
            value: detail::flex_list_item_type(detail::flex_list_type::enumeration, 0)
            description: Enumeration item type block.
          - name: request
            value: detail::flex_list_item_type(detail::flex_list_type::enumeration, 1)
            description: Enumeration item type request.
          - name: sample_info
            value: detail::flex_list_item_type(detail::flex_list_type::enumeration, 2)
            description: Enumeration item type sample info.
      - !struct &enum_header
        name: header
        description: Enum header structure.
        fields:
          - name: type
            description: Type of the item.
            type: *enum_item_type
          - name: item_version
            description: Protocol version.
            type: !builtin uint16_t
      - !struct
        &enum_block_counter
        name: enum_block_counter
        description: Performance counter block descriptor.
        fields:
          - name: type
            description: Type of performance counter block.
            type: *block_type
          - name: set
            description: "Which SET this represents: primary, secondary or tertiary."
            type: *prfcnt_set
          - name: pad
            description: Padding bytes.
            type: !array { element_type: !builtin uint8_t, array_size: 2 }
            meta:
              padding: yes
          - name: num_instances
            description: How many instances of this block type exist in the hardware.
            type: !builtin uint16_t
          - name: num_values
            description: How many entries in the values array there are for samples from this block.
            type: !builtin uint16_t
          - name: counter_mask
            description: >-
              Bitmask that indicates counter availability in this block.
              A '0' indicates that a counter is not available at that
              index and will always return zeroes if requested.
            type: !array { element_type: !builtin uint64_t, array_size: 2 }
      - !struct
        &enum_request
        name: enum_request
        description: Request descriptor.
        items:
          - !enum &enum_request_request_type
            name: request_type
            description: "Request type."
            underlying_type: !builtin uint16_t
            values:
              - name: mode
                description: Request mode.
              - name: enable
                description: Request enable.
              - name: scope
                description: Request scope.
        fields:
          - name: request_item_type
            description: Type of request.
            type: *enum_request_request_type
          - name: pad
            description: Padding bytes.
            type: !builtin uint16_t
            meta:
              padding: yes
          - name: versions_mask
            description: Bitmask of versions that support this request.
            type: !builtin uint32_t
      - !struct
        &enum_sample_info
        name: enum_sample_info
        description: Sample information descriptor.
        fields:
          - name: num_clock_domains
            description: Number of clock domains of the GPU.
            type: !builtin uint32_t
          - name: pad
            description: Padding bytes.
            type: !builtin uint32_t
            meta:
              padding: yes
      - !union &enum_union
        name: enum_union
        description: Enum union.
        fields:
          - name: block_counter
            description: Performance counter block descriptor.
            type: *enum_block_counter
          - name: request
            description: Request descriptor.
            type: *enum_request
          - name: sample_info
            description: Sample info descriptor.
            type: *enum_sample_info
    fields:
      - name: hdr
        description: Header describing the type of item in the list.
        type: *enum_header
      - name: padding
        description: Padding bytes.
        type: !array { element_type: !builtin uint8_t, array_size: 4 }
        meta:
          padding: yes
      - name: u
        description: Structure containing discriptor for enumeration item type.
        type: *enum_union
  - !struct &metadata_item
    name: metadata_item
    description: Performance counters metadata item.
    items:
      - !enum &metadata_item_type
        name: item_type
        description: Metadata item type.
        underlying_type: !builtin uint16_t
        values:
          - name: "none"
            description: Sentinel value.
            value: 0
          - name: sample
            value: detail::flex_list_item_type(detail::flex_list_type::metadata, 0)
            description: Metadata item type sample.
          - name: clock
            value: detail::flex_list_item_type(detail::flex_list_type::metadata, 1)
            description: Metadata item type clock.
          - name: block
            value: detail::flex_list_item_type(detail::flex_list_type::metadata, 2)
            description: Metadata item type block.
      - !struct &metadata_header
        name: header
        description: Metadata header structure.
        fields:
          - name: type
            description: Type of the item.
            type: *metadata_item_type
          - name: item_version
            description: Protocol version.
            type: !builtin uint16_t
      - !struct
        &block_metadata
        name: block_metadata
        description: Metadata for counter block.
        items:
          - !bitmask
            &block_state_type
            name: block_state_type
            description: Block state bits.
            underlying_type: !builtin uint32_t
            values:
              - name: "on"
                description: This block was powered on for at least some portion of the sample.
                bit_number: 0
              - name: "off"
                description: This block was powered off for at least some portion of the sample.
                bit_number: 1
              - name: available
                description: This block was available to this VM for at least some portion of the sample.
                bit_number: 2
              - name: unavailable
                description: >-
                  This block was not available to this VM for at least some portion of the sample
                  Note that no data is collected when the block is not available to the VM.
                bit_number: 3
              - name: normal_mode
                description: This block was operating in "normal" (non-protected) mode for at least some portion of the sample.
                bit_number: 4
              - name: protected_mode
                description: >-
                  This block was operating in "protected" mode for at least some portion of the sample.
                  Note that no data is collected when the block is in protected mode.
                bit_number: 5
        fields:
          - name: type
            description: Type of performance counter block.
            type: *block_type
          - name: block_idx
            description: Index of performance counter block.
            type: !builtin uint8_t
          - name: set
            description: Set of performance counter block.
            type: *prfcnt_set
          - name: pad_u8
            description: Padding bytes.
            type: !builtin uint8_t
            meta:
              padding: yes
          - name: block_state
            description: >-
              Bits set indicate the states which the block is known to
              have operated in during this sample.
            type: *block_state_type
          - name: values_offset
            description: >-
              Offset from the start of the mmapped region, to the values for this block.
              The values themselves are an array of uint64_t.
            type: !builtin uint32_t
          - name: pad_u32
            description: Padding bytes.
            type: !builtin uint32_t
            meta:
              padding: yes
      - !struct
        &clock_metadata
        name: clock_metadata
        description: Metadata for clock cycles.
        items:
          - !constant
            &max_reported_domains
            name: max_reported_domains
            description: Maximum number of clock domains.
            type: !builtin size_t
            value: 4
        fields:
          - name: num_domains
            description: Number of domains this metadata refers to.
            type: !builtin uint32_t
          - name: pad
            description: Padding bytes.
            type: !builtin uint32_t
            meta:
              padding: yes
          - name: cycles
            description: >-
              Number of cycles elapsed in each counter domain between timestamp_start
              and timestamp_end. Valid only for the first num_domains.
            type: !array { element_type: !builtin uint64_t, array_size: max_reported_domains }
      - !struct
        &sample_metadata
        name: sample_metadata
        description: Metadata for counter sample data.
        items:
          - !bitmask
            &sample_flag
            name: sample_flag
            description: Sample flags.
            underlying_type: !builtin uint32_t
            values:
              - name: overflow
                description: This sample contains overflows from dump duration stretch because the sample buffer was full.
                bit_number: 0
              - name: error
                description: This sample has had an error condition for sample duration.
                bit_number: 30
        fields:
          - name: timestamp_start
            description: Earliest timestamp that values in this sample represent.
            type: !builtin uint64_t
          - name: timestamp_stop
            description: Latest timestamp that values in this sample represent.
            type: !builtin uint64_t
          - name: seq
            description: Sequence number of this sample. Must match the value from GET_SAMPLE.
            type: !builtin uint64_t
          - name: user_data
            description: User data provided to HWC_CMD_START or HWC_CMD_SAMPLE_*
            type: !builtin uint64_t
          - name: flags
            description: Property flags.
            type: *sample_flag
          - name: pad
            description: Padding bytes.
            type: !builtin uint32_t
            meta:
              padding: yes
      - !union &metadata_union
        name: metadata_union
        description: Metadata union.
        fields:
          - name: sample_md
            description: Counter sample data metadata descriptor.
            type: *sample_metadata
          - name: clock_md
            description: Clock cycles metadata descriptor.
            type: *clock_metadata
          - name: block_md
            description: Counter block metadata descriptor.
            type: *block_metadata
    fields:
      - name: hdr
        description: Header describing the type of item in the list.
        type: *metadata_header
      - name: padding
        description: Padding bytes.
        type: !array { element_type: !builtin uint8_t, array_size: 4 }
        meta:
          padding: yes
      - name: u
        description: Structure containing descriptor for metadata type.
        type: *metadata_union
  - !struct
    &control_cmd
    name: control_cmd
    description: Control command.
    items:
      - !enum
        &control_cmd_code
        name: control_cmd_code
        description: Control command code for client session.
        underlying_type: !builtin uint16_t
        values:
          - name: start
            description: Start the counter data dump run for the calling client session.
            value: 1
          - name: stop
            description: Stop the counter data dump run for the calling client session.
          - name: sample_sync
            description: Trigger a synchronous manual sample.
          - name: sample_async
            description: Trigger an asynchronous manual sample.
          - name: discard
            description: >-
              Discard all samples which have not yet
              been consumed by userspace. Note that
              this can race with new samples if
              HWC_CMD_STOP is not called first.
    fields:
      - name: cmd
        description: Control command for the session.
        type: *control_cmd_code
      - name: pad
        description: Padding bytes.
        type: !array { element_type: !builtin uint16_t, array_size: 3 }
        meta:
          padding: yes
      - name: user_data
        description: >-
          Offset from the start of the mapped area to the first
          entry in the metadata list (sample_metadata) for this
          sample.
        type: !builtin uint64_t
  - !struct &request_item
    name: request_item
    description: Performance counter request item.
    items:
      - !enum &request_item_type
        name: item_type
        description: Type of request descriptor.
        underlying_type: !builtin uint16_t
        values:
          - name: "none"
            description: Sentinel value.
            value: 0
          - name: mode
            description: Specify the capture mode to be used for the session.
            value: detail::flex_list_item_type(detail::flex_list_type::request, 0)
          - name: enable
            description: Specify which performance counters to capture.
            value: detail::flex_list_item_type(detail::flex_list_type::request, 1)
          - name: scope
            description: Specify the scope of the performance counters.
            value: detail::flex_list_item_type(detail::flex_list_type::request, 2)
      - !struct &request_header
        name: header
        description: Request header structure.
        fields:
          - name: type
            description: Type of the item.
            type: *request_item_type
          - name: item_version
            description: Protocol version.
            type: !builtin uint16_t
      - !struct
        &request_mode
        name: request_mode
        description: Mode request descriptor.
        items:
          - !enum
            &sampling_mode
            name: sampling_mode
            description: Capture mode for counter sampling.
            underlying_type: !builtin uint8_t
            values:
              - name: manual
                description: Manual sampling mode.
              - name: periodic
                description: Periodic sampling mode.
          - !struct
            &periodic_type
            name: periodic_type
            description: Periodic mode configuration struct.
            fields:
              - name: period_ns
                description: Sample period (nanoseconds).
                type: !builtin uint64_t
          - !union
            &mode_config_union
            name: mode_config_union
            description: Mode configuration union.
            fields:
              - name: periodic
                description: Periodic mode configuration.
                type: *periodic_type
        fields:
          - name: mode
            description: Capture mode for the session, either manual or periodic.
            type: *sampling_mode
          - name: pad
            description: Padding bytes.
            type: !array { element_type: !builtin uint8_t, array_size: 7 }
            meta:
              padding: yes
          - name: mode_config
            description: Structure containing configuration for periodic mode.
            type: *mode_config_union
      - !struct
        &request_enable
        name: request_enable
        description: Enable request descriptor.
        fields:
          - name: type
            description: Type of performance counter block.
            type: *block_type
          - name: set
            description: "Which SET to use: primary, secondary or tertiary."
            type: *prfcnt_set
          - name: pad
            description: Padding bytes.
            type: !array { element_type: !builtin uint8_t, array_size: 6 }
            meta:
                padding: yes
          - name: enable_mask
            description: >-
              Bitmask that indicates which performance counters to enable.
              Unavailable counters will be ignored.
            type: !array { element_type: !builtin uint64_t, array_size: 2 }
      - !struct
        &request_scope
        name: request_scope
        description: Scope request descriptor.
        items:
          - !enum
            &counters_scope
            name: counters_scope
            description: Scope of performance counters.
            underlying_type: !builtin uint8_t
            values:
              - name: global
                description: Global scope.
        fields:
          - name: scope
            description: Scope of the performance counters to capture.
            type: *counters_scope
          - name: pad
            description: Padding bytes.
            type: !array { element_type: !builtin uint8_t, array_size: 7 }
            meta:
              padding: yes
      - !union &request_union
        name: request_union
        description: Request union.
        fields:
          - name: req_mode
            description: Mode request descriptor.
            type: *request_mode
          - name: req_enable
            description: Enable request descriptor.
            type: *request_enable
          - name: req_scope
            description: Scope request descriptor.
            type: *request_scope
    fields:
      - name: hdr
        description: Header describing the type of item in the list.
        type: *request_header
      - name: padding
        description: Padding bytes.
        type: !array { element_type: !builtin uint8_t, array_size: 4 }
        meta:
          padding: yes
      - name: u
        description: Structure containing discriptor for enumeration item type.
        type: *request_union
  - !struct
    &sample_access
    name: sample_access
    description: Metadata to access a sample.
    fields:
      - name: sequence
        description: >-
          Sequence number for the sample.
          For GET_SAMPLE, it will be set by the kernel.
          For PUT_SAMPLE, it shall be equal to the same value
          provided by the kernel for GET_SAMPLE.
        type: !builtin uint64_t
      - name: sample_metadata_ptr
        description: >-
          Offset from the start of the mapped area to the first
          entry in the metadata list (sample_metadata) for this
          sample.
        type: !offset-pointer { value_type: *metadata_item , representation_type: !builtin uint64_t, const: yes }
commands:
  - !ioctl-command
    name: issue_command
    description: Issue command.
    number: 0x00
    command_type: _IOW
    arg_type: *control_cmd
  - !ioctl-command
    name: get_sample
    description: Get sample.
    number: 0x01
    command_type: _IOR
    arg_type: *sample_access
  - !ioctl-command
    name: put_sample
    description: Put sample.
    number: 0x10
    command_type: _IOW
    arg_type: *sample_access
...
