<category name="Mali Job Manager" per_cpu="no">
	<event advanced="yes" counter="ARM_Mali-TMIx_MESSAGES_SENT" description="Sent messages" name="Sent" title="Mali Job Manager Messages" units="messages" />
	<event advanced="yes" counter="ARM_Mali-TMIx_MESSAGES_RECEIVED" description="Received messages" name="Received" title="Mali Job Manager Messages" units="messages" />
	<event counter="ARM_Mali-TMIx_GPU_ACTIVE" description="This counter increments every cycle that the GPU has any workload present in a Job slot, and therefore gives an indication of total GPU processing load. &#10;&#10;This counter will increment any cycle a workload is loaded into a slot even if the GPU is totally stalled waiting for external memory to return data; this is still counted as active time even though no forward progress was made." name="GPU active" title="Mali Job Manager Cycles" units="cycles" />
	<event counter="ARM_Mali-TMIx_IRQ_ACTIVE" description="This counter increments every cycle that the GPU has an IRQ pending, waiting for the CPU to handle it.&#10;&#10;Cycles with a pending interrupt do not necessarily indicate lost performance because the GPU can process other queued work in parallel to the pending interrupt, but a high value can be indicative of an underlying problem. If a high cycle count is observed alongside other counters which make it look like the GPU is starving for work, such as a low {{COMPUTE_ACTIVE}} and {{FRAG_ACTIVE}}, this may indicate a system performance issue. The most common cause is a misbehaving device driver, which may not be the Mali device driver, that has masked interrupts for a long period of time. This stops the CPU receiving new interrupt notifications until interrupts are unmasked again." name="IRQ active" title="Mali Job Manager Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS0_JOBS" description="Fragment jobs" name="Fragment jobs" title="Mali Job Manager Jobs" units="jobs" />
	<event counter="ARM_Mali-TMIx_JS0_TASKS" description="This counter increments every 32x32 pixel region, or part thereof, processed by the Job Manager." name="Fragment tasks" title="Mali Job Manager Tasks" units="tasks" />
	<event counter="ARM_Mali-TMIx_JS0_ACTIVE" description="This counter increments every cycle that the GPU has any workload present in the fragment Job slot. &#10;&#10;This counter will increment any cycle a workload is loaded into a slot even if the GPU is totally stalled waiting for external memory to return data; this is still counted as active time even though no forward progress was made.&#10;&#10;For most graphics content there are significantly more fragments than vertices, so this Job slot will usually have the highest processing load. In content which is not hitting vsync and the GPU is the performance bottleneck it is normal for {{JS0_ACTIVE}} to be approximately equal to {{GPU_ACTIVE}}, with vertex and fragment processing running in parallel." name="Fragment active" title="Mali Job Manager Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS0_WAIT_READ" description="Fragment jobÂ descriptor read wait cycles" name="Fragment descriptor read" title="Mali Job Manager Wait Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS0_WAIT_ISSUE" description="Fragment job issue wait cycles" name="Fragment job issue" title="Mali Job Manager Wait Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS0_WAIT_DEPEND" description="Fragment job dependency wait cycles" name="Fragment job dependency" title="Mali Job Manager Wait Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS0_WAIT_FINISH" description="Fragment job finish wait cycles" name="Fragment job finish" title="Mali Job Manager Wait Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS1_JOBS" description="Non-fragment jobs" name="Non-fragment job" title="Mali Job Manager Jobs" units="jobs" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS1_TASKS" description="Non-fragment tasks" name="Non-fragment task" title="Mali Job Manager Tasks" units="tasks" />
	<event counter="ARM_Mali-TMIx_JS1_ACTIVE" description="This counter increments every cycle that the GPU has any workload present in the non-fragment Job slot.&#10;&#10;This Job slot can be used for vertex shaders, tessellation shaders, geometry shaders, fixed function tiling, and compute shaders. This counter cannot disambiguate between these workloads.&#10;&#10;This counter will increment any cycle a workload is loaded into a slot even if the GPU is totally stalled waiting for external memory to return data; this is still counted as active time even though no forward progress was made." name="Non-fragment active" title="Mali Job Manager Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS1_WAIT_READ" description="Non-fragment job descriptor read wait cycles" name="Non-fragment descriptor read" title="Mali Job Manager Wait Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS1_WAIT_ISSUE" description="Non-fragment job issue wait cycles" name="Non-fragment job issue" title="Mali Job Manager Wait Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS1_WAIT_DEPEND" description="Non-fragment job dependency wait cycles" name="Non-fragment job dependency" title="Mali Job Manager Wait Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS1_WAIT_FINISH" description="Non-fragment job finish wait cycles" name="Non-fragment job finish" title="Mali Job Manager Wait Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS2_JOBS" description="Reserved slot jobs" name="Reserved job" title="Mali Job Manager Jobs" units="jobs" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS2_TASKS" description="Reserved slot tasks" name="Reserved task" title="Mali Job Manager Tasks" units="tasks" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS2_ACTIVE" description="Reserved active cycles" name="Reserved active" title="Mali Job Manager Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS2_WAIT_READ" description="Reserved job descriptor read wait cycles" name="Reserved descriptor read" title="Mali Job Manager Wait Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS2_WAIT_ISSUE" description="Reserved job issue wait cycles" name="Reserved job issue" title="Mali Job Manager Wait Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS2_WAIT_DEPEND" description="Reserved job dependency wait cycles" name="Reserved job dependency" title="Mali Job Manager Wait Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JS2_WAIT_FINISH" description="Reserved job finish wait cycles" name="Reserved job finish" title="Mali Job Manager Wait Cycles" units="cycles" />
</category>
<category name="Mali L2 Cache" per_cpu="no">
	<event advanced="yes" counter="ARM_Mali-TMIx_MMU_REQUESTS" description="MMU lookup requests" name="MMU lookup" title="Mali MMU Stage 1 Translations" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_RD_MSG_IN" description="Input internal read requests" name="Read request" title="Mali L2 Cache Requests" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_RD_MSG_IN_STALL" description="Input internal read stall cycles" name="Read stall" title="Mali L2 Cache Stall Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_WR_MSG_IN" description="Input internal write requests" name="Write request" title="Mali L2 Cache Requests" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_WR_MSG_IN_STALL" description="Input internal write stall cycles" name="Write stall" title="Mali L2 Cache Stall Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_SNP_MSG_IN" description="Input internal snoop requests" name="Snoop request" title="Mali L2 Cache Requests" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_SNP_MSG_IN_STALL" description="Input internal snoop stall cycles" name="Snoop stall" title="Mali L2 Cache Stall Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_RD_MSG_OUT" description="Output internal read requests" name="L1 read request" title="Mali L2 Cache Requests" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_RD_MSG_OUT_STALL" description="Output internal read stall cycles" name="L1 read stall" title="Mali L2 Cache Stall Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_WR_MSG_OUT" description="Output internal write requests" name="L1 write request" title="Mali L2 Cache Requests" units="requests" />
	<event counter="ARM_Mali-TMIx_L2_ANY_LOOKUP" description="This counter increments for every L2 cache lookup made." name="Any lookup" title="Mali L2 Cache Lookups" units="requests" />
	<event counter="ARM_Mali-TMIx_L2_READ_LOOKUP" description="This counter increments for every L2 cache read lookup made." name="Read lookup" title="Mali L2 Cache Lookups" units="requests" />
	<event counter="ARM_Mali-TMIx_L2_WRITE_LOOKUP" description="This counter increments for every L2 cache write lookup made." name="Write lookup" title="Mali L2 Cache Lookups" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_SNOOP_LOOKUP" description="Input external snoop lookup requests" name="External snoop lookup" title="Mali L2 Cache Lookups" units="requests" />
	<event counter="ARM_Mali-TMIx_L2_EXT_READ" description="This counter increments for every external read transaction made on the AXI bus.&#10;&#10;The longest transaction is 64 bytes in length, but shorter transactions may be generated in some circumstances." name="Read transaction" title="Mali External Bus Accesses" units="transactions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_READ_NOSNP" description="Output external ReadNoSnoop transactions" name="ReadNoSnoop transaction" title="Mali External Bus Accesses" units="transactions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_READ_UNIQUE" description="Output external ReadUnique transactions" name="ReadUnique transaction" title="Mali External Bus Accesses" units="transactions" />
	<event counter="ARM_Mali-TMIx_L2_EXT_READ_BEATS" description="This counter increments for every external read data beat on the AXI bus. &#10;&#10;Most Mali implementations use a 128-bit data bus, allowing a single 64 byte transaction to be sent using 4 data beats." name="Read beat" title="Mali External Bus Beats" units="beats" />
	<event counter="ARM_Mali-TMIx_L2_EXT_AR_STALL" description="This counter increments for every stall cycle on the AXI bus where the GPU has a valid read transaction to send, but is awaiting a ready signal from the bus." name="Read stall" title="Mali External Bus Stalls" units="cycles" />
	<event counter="ARM_Mali-TMIx_L2_EXT_AR_CNT_Q1" description="This counter increments for every read transaction initiated when 0-25% of transaction IDs are in use." name="0-25%" title="Mali External Bus Outstanding Reads" units="transactions" />
	<event counter="ARM_Mali-TMIx_L2_EXT_AR_CNT_Q2" description="This counter increments for every read transaction initiated when 25-50% of transaction IDs are in use." name="25-50%" title="Mali External Bus Outstanding Reads" units="transactions" />
	<event counter="ARM_Mali-TMIx_L2_EXT_AR_CNT_Q3" description="This counter increments for every read transaction initiated when 50-75% of transaction IDs are in use." name="50-75%" title="Mali External Bus Outstanding Reads" units="transactions" />
	<event counter="ARM_Mali-TMIx_L2_EXT_RRESP_0_127" description="This counter increments for every read beat which is returned between 0 and 127 cycles after the transaction started." name="0-127 cycles" title="Mali External Bus Read Latency" units="beats" />
	<event counter="ARM_Mali-TMIx_L2_EXT_RRESP_128_191" description="This counter increments for every read beat which is returned between 128 and 191 cycles after the transaction started." name="128-191 cycles" title="Mali External Bus Read Latency" units="beats" />
	<event counter="ARM_Mali-TMIx_L2_EXT_RRESP_192_255" description="This counter increments for every read beat which is returned between 192 and 255 cycles after the transaction started." name="192-255 cycles" title="Mali External Bus Read Latency" units="beats" />
	<event counter="ARM_Mali-TMIx_L2_EXT_RRESP_256_319" description="This counter increments for every read beat which is returned between 256 and 319 cycles after the transaction started." name="256-319 cycles" title="Mali External Bus Read Latency" units="beats" />
	<event counter="ARM_Mali-TMIx_L2_EXT_RRESP_320_383" description="This counter increments for every read beat which is returned between 320 and 383 cycles after the transaction started." name="320-383 cycles" title="Mali External Bus Read Latency" units="beats" />
	<event counter="ARM_Mali-TMIx_L2_EXT_WRITE" description="This counter increments for every external write transaction made on the AXI bus.&#10;&#10;The longest transaction is 64 bytes in length, but shorter transactions may be generated in some circumstances." name="Write transaction" title="Mali External Bus Accesses" units="transactions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_WRITE_NOSNP_FULL" description="Output external WriteNoSnoopFull transactions" name="WriteNoSnoopFull transaction" title="Mali External Bus Accesses" units="transactions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_WRITE_NOSNP_PTL" description="Output external WriteNoSnoopPartial transactions" name="WriteNoSnoopPartial transaction" title="Mali External Bus Accesses" units="transactions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_WRITE_SNP_FULL" description="Output external WriteSnoopFull transactions" name="WriteSnoopFull transaction" title="Mali External Bus Accesses" units="transactions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_WRITE_SNP_PTL" description="Output external WriteSnoopPartial transactions" name="WriteSnoopPartial transaction" title="Mali External Bus Accesses" units="transactions" />
	<event counter="ARM_Mali-TMIx_L2_EXT_WRITE_BEATS" description="This counter increments for every external write data beat on the AXI bus. &#10;&#10;Most Mali implementations use a 128-bit data bus, allowing a single 64 byte transaction to be sent using 4 data beats." name="Write beat" title="Mali External Bus Beats" units="beats" />
	<event counter="ARM_Mali-TMIx_L2_EXT_W_STALL" description="This counter increments for every stall cycle on the AXI bus where the GPU has a valid write transaction to send, but is awaiting a ready signal from the bus." name="Write stall" title="Mali External Bus Stalls" units="cycles" />
	<event counter="ARM_Mali-TMIx_L2_EXT_AW_CNT_Q1" description="This counter increments for every write transaction initiated when 0-25% of transaction IDs are in use." name="0-25%" title="Mali External Bus Outstanding Writes" units="transactions" />
	<event counter="ARM_Mali-TMIx_L2_EXT_AW_CNT_Q2" description="This counter increments for every write transaction initiated when 25-50% of transaction IDs are in use." name="25-50%" title="Mali External Bus Outstanding Writes" units="transactions" />
	<event counter="ARM_Mali-TMIx_L2_EXT_AW_CNT_Q3" description="This counter increments for every write transaction initiated when 50-75% of transaction IDs are in use." name="50-75%" title="Mali External Bus Outstanding Writes" units="transactions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_SNOOP" description="Input external snoop transactions" name="Snoop transaction" title="Mali External Bus Accesses" units="transactions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_SNOOP_STALL" description="Input external snoop stall cycles" name="Snoop stall" title="Mali External Bus Stalls" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_SNOOP_RESP_CLEAN" description="Input external snoop transactions that hit with no data response" name="Snoop w/ no data response" title="Mali External Bus Accesses" units="transactions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_SNOOP_RESP_DATA" description="Input external snoop transactions that hit with data response" name="Snoop w/ data response" title="Mali External Bus Accesses" units="transactions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_L2_EXT_SNOOP_INTERNAL" description="Input external snoop transactions triggering L1 snoop" name="Snoop with L1 snoop" title="Mali External Bus Accesses" units="transactions" />
</category>
<category name="Mali Tiler" per_cpu="no">
	<event counter="ARM_Mali-TMIx_TILER_ACTIVE" description="This counter increments every cycle the tiler has a workload in the processing queue.&#10;&#10;This counter increments every cycle the tiler is processing a task. The tiler can run in parallel to vertex shading and fragment shading so a high cycle count here does not necessarily imply a bottleneck, unless the {{COMPUTE_ACTIVE}} counter in the shader cores are very low relative to this." name="Tiler active" title="Mali Job Manager Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_JOBS_PROCESSED" description="Tiler jobs" name="Tiler job" title="Mali Job Manager Jobs" units="jobs" />
	<event counter="ARM_Mali-TMIx_TRIANGLES" description="This counter increments for every input triangle primitive in the geometry stream.&#10;&#10;This counter counts the application inputs before any culling or clipping." name="Triangle" title="Mali Input Primitives" units="primitives" />
	<event counter="ARM_Mali-TMIx_LINES" description="This counter increments for every input line primitive in the geometry stream.&#10;&#10;This counter counts the application inputs before any culling or clipping." name="Line" title="Mali Input Primitives" units="primitives" />
	<event counter="ARM_Mali-TMIx_POINTS" description="This counter increments for every input point primitive in the geometry stream.&#10;&#10;This counter counts the application inputs before any culling or clipping." name="Point" title="Mali Input Primitives" units="primitives" />
	<event counter="ARM_Mali-TMIx_FRONT_FACING" description="This counter increments for every visible front-facing triangle which survives culling." name="Front-facing" title="Mali Visible Primitives" units="primitives" />
	<event counter="ARM_Mali-TMIx_BACK_FACING" description="This counter increments for every visible back-facing triangle which survives culling." name="Back-facing" title="Mali Visible Primitives" units="primitives" />
	<event counter="ARM_Mali-TMIx_PRIM_VISIBLE" description="This counter increments for every visible primitive which survives culling.&#10;&#10;Note that there may still be some forms of redundancy present in the set of visible primitives. For example a complex mesh which is inside the frustum but occluded by a wall will still be classified as &quot;visible&quot; by this counter. Software techniques such as zone-based portal culling can be used to effectively cull objects inside the frustum, as they can provide guarantees about visibility between rooms in a game level." name="Visible" title="Mali Primitive Culling" units="primitives" />
	<event counter="ARM_Mali-TMIx_PRIM_CULLED" description="This counter increments for every primitive culled by the facing test.&#10;&#10;For an arbitrary 3D scene we would expect approximately half of the triangles to be back-facing; if a significantly lower percentage than this is seen review whether the facing test is enabled." name="Culled by facing test" title="Mali Primitive Culling" units="primitives" />
	<event counter="ARM_Mali-TMIx_PRIM_CLIPPED" description="This counter increments for every primitive culled by the frustum test.&#10;&#10;It is expected that a small number of primitives will be outside of the frustum, as application culling is never perfect and some models may intersect a frustum clip plane. Our rule of thumb is that under 10% of the primitives should be culled by this stage. If the number of primitives being culled is significantly higher than this check the efficiency of any software culling schemes in the application. &#10;&#10;Draw call bounding box checks can be used to cull draws which are completely out-of-frustum. If batched draw calls are complex and have a large bounding volume consider using smaller batches to reduce the bounding volume to enable better culling." name="Culled by frustum test" title="Mali Primitive Culling" units="primitives" />
	<event counter="ARM_Mali-TMIx_PRIM_SAT_CULLED" description="This counter increments for every primitive culled by the sample coverage test.&#10;&#10;It is expected that a small number of primitives will be small and fail the sample coverage test, as application mesh selection can never be perfect. A high percentage of triangles here implies that the application may have a large number of very small triangles, which are very expensive for a GPU to process. Aim to keep triangle screen area above at least 10 pixels, using schemes such as mesh level-of-detail to select simplified meshes as objects move further away from the camera." name="Culled by sample test" title="Mali Primitive Culling" units="primitives" />
	<event advanced="yes" counter="ARM_Mali-TMIx_BIN_ALLOC_INIT" description="Tile list initial allocations" name="Initial allocation" title="Mali Tiler Allocations" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_BIN_ALLOC_OVERFLOW" description="Tile list overflow allocations" name="Overflow allocation" title="Mali Tiler Allocations" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_BUS_READ" description="Output internal read beats" name="Read" title="Mali Tiler Internal Bus Beats" units="beats" />
	<event advanced="yes" counter="ARM_Mali-TMIx_BUS_WRITE" description="Output internal write beats" name="Write" title="Mali Tiler Internal Bus Beats" units="beats" />
	<event advanced="yes" counter="ARM_Mali-TMIx_LOADING_DESC" description="Loading descriptor wait cycles" name="Loading descriptor stall" title="Mali Tiler Cycles" units="cycles" />
	<event counter="ARM_Mali-TMIx_IDVS_POS_SHAD_REQ" description="This counter increments for every position shading request in the IDVS flow.&#10;&#10;Position shading executes the first part of the vertex shader, and then submits the primitive for clipping and culling. The same vertex may be shaded multiple times if is has been evicted from the post-transform cache, so keep good spatial locality of index reuse in your index buffers. Each request contains {{MaliIDVSTaskSize}} vertices.&#10;&#10;Note that not all types of draw call can use the IDVS flow, so this may not account for all submitted geometry." name="Position shading" title="Mali Tiler Shading Requests" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_IDVS_POS_SHAD_WAIT" description="IDVS position shading outstanding cycles" name="Position shading outstanding" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_IDVS_POS_SHAD_STALL" description="IDVS position shading stall cycles" name="Position shading stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_IDVS_POS_FIFO_FULL" description="IDVS position FIFO full cycles" name="Position FIFO full" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_PREFETCH_STALL" description="Vertex prefetcher stall cycles" name="Vertex prefetch stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_VCACHE_HIT" description="Position cache hit requests" name="Position cache hit" title="Mali Tiler Vertex Cache Accesses" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_VCACHE_MISS" description="Position cache miss requests" name="Position cache miss" title="Mali Tiler Vertex Cache Accesses" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_VCACHE_LINE_WAIT" description="Position cache line availability stall cycles" name="Position cache line stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_VFETCH_POS_READ_WAIT" description="Position fetcher read cycles" name="Position fetcher read" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_VFETCH_VERTEX_WAIT" description="Position fetcher read stall cycles" name="Position fetcher read stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_VFETCH_STALL" description="Primitive assembly busy stall cycles" name="Primitive assembly busy stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_PRIMASSY_STALL" description="Bounding box generator busy stall cycles" name="Bounding box generator busy stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_BBOX_GEN_STALL" description="Tile binning unit busy stall cycles" name="Binning unit busy stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_IDVS_VBU_HIT" description="Varying cache hits" name="Varying cache hit" title="Mali Tiler Vertex Cache Accesses" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_IDVS_VBU_MISS" description="Varying cache misses" name="Varying cache miss" title="Mali Tiler Vertex Cache Accesses" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_IDVS_VBU_LINE_DEALLOCATE" description="Varying cache line deallocation requests" name="Varying cache line free" title="Mali Tiler Vertex Cache Accesses" units="requests" />
	<event counter="ARM_Mali-TMIx_IDVS_VAR_SHAD_REQ" description="This counter increments for every varying shading request in the IDVS flow.&#10;&#10;Varying shading executes the second part of the vertex shader, for any primitive which survives clipping and culling. The same vertex may be shaded multiple times if is has been evicted from the post-transform cache, so keep good spatial locality of index reuse in your index buffers. Each request contains {{MaliIDVSTaskSize}} vertices.&#10;&#10;Note that not all types of draw call can use the IDVS flow, so this may not account for all submitted geometry." name="Varying shading" title="Mali Tiler Shading Requests" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_IDVS_VAR_SHAD_STALL" description="IDVS varying shading stall cycles" name="Varying shading stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_BINNER_STALL" description="Tile iterator busy stall cycles" name="Iterator busy stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_ITER_STALL" description="Compressor busy stall cycles" name="Compressor busy stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_COMPRESS_MISS" description="Compressor stream reset requests" name="Compressor resets" title="Mali Tiler Compressor Accesses" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_COMPRESS_STALL" description="Pointer manager busy stall cycles" name="Pointer manager busy stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_PCACHE_HIT" description="Pointer cache hits" name="Pointer cache hit" title="Mali Tiler Pointer Cache Accesses" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_PCACHE_MISS" description="Pointer cache misses" name="Pointer cache miss" title="Mali Tiler Pointer Cache Accesses" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_PCACHE_MISS_STALL" description="Pointer cache line miss stall cycles" name="Pointer cache miss stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_PCACHE_EVICT_STALL" description="Pointer cache line evict stall cycles" name="Pointer cache evict stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_PMGR_PTR_WR_STALL" description="Pointer manager pointer writeback stall cycles" name="Pointer manager pointer write stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_PMGR_PTR_RD_STALL" description="Pointer manager read stall cycles" name="Pointer manager read stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_PMGR_CMD_WR_STALL" description="Pointer manager data writeback stall cycles" name="Pointer manager data write stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_WRBUF_ACTIVE" description="Writebuffer active cycles" name="Writebuffer active" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_WRBUF_HIT" description="Writebuffer hits" name="Writebuffer hit" title="Mali Tiler Writebuffer Accesses" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_WRBUF_MISS" description="Writebuffer misses" name="Writebuffer miss" title="Mali Tiler Writebuffer Accesses" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_WRBUF_NO_FREE_LINE_STALL" description="Writebuffer no free line stall cycles" name="Writebuffer line stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_WRBUF_NO_AXI_ID_STALL" description="Writebuffer outstanding transaction stall cycles" name="Writebuffer transaction stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_WRBUF_AXI_STALL" description="Writebuffer write stall cycles" name="Writebuffer write stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_UTLB_TRANS" description="UTLB lookup requests" name="UTLB lookup" title="Mali Tiler MMU Accesses" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_UTLB_TRANS_HIT" description="UTLB lookup hits" name="UTLB read hit" title="Mali Tiler MMU Accesses" units="requests" />
	<event advanced="yes" counter="ARM_Mali-TMIx_UTLB_TRANS_STALL" description="UTLB lookup cache full stall cycles" name="UTLB full stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_UTLB_TRANS_MISS_DELAY" description="UTLB lookup wait cycles" name="UTLB wait stall" title="Mali Tiler Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_UTLB_MMU_REQ" description="Main MMU lookup requests" name="MMU lookup" title="Mali Tiler MMU Accesses" units="requests" />
</category>
<category name="Mali Shader Core" per_cpu="no">
	<event counter="ARM_Mali-TMIx_FRAG_ACTIVE" description="This counter increments every cycle that the shader core is processing some fragment workload.&#10;&#10;Active processing includes any cycle where fragment work is running anywhere in the fixed-function front-end, back-end, or the in the programmable core." name="Fragment active" title="Mali Core Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_FRAG_PRIMITIVES" description="Fragment read primitives" name="Read" title="Mali Core Primitives" units="primitives" />
	<event counter="ARM_Mali-TMIx_FRAG_PRIM_RAST" description="This counter increments for every primitive entering the rasterization unit.&#10;&#10;This counter will increment once per primitive per tile; if you wish to know the total number of primitives in the scene see the {{MaliInputGeometryTotalPrimitives}} expression." name="Rasterized" title="Mali Core Primitives" units="primitives" />
	<event counter="ARM_Mali-TMIx_FRAG_FPK_ACTIVE" description="This counter increments every cycle that the pre-pipe quad queue contains at least one quad waiting to run.&#10;&#10;If this queues completely drains then it will not be possible to spawn a fragment warp when an execution slot becomes available, which may cause reduced performance due to low thread occupancy causing starvation of the functional units. Possible causes for this include:&#10;&#10;* Tiles which contain no geometry.&#10;* Tiles which contain a lot of geometry which can be killed by either early ZS or FPK." name="Fragment FPK active" title="Mali Core Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_FRAG_STARVING" description="Fragment front-end starvation cycles" name="Fragment starvation" title="Mali Core Starvation Cycles" units="cycles" />
	<event counter="ARM_Mali-TMIx_FRAG_WARPS" description="This counter increments for every created fragment warp.&#10;&#10;!!! Warning&#10;  Note that the warp size can vary based on Mali GPU product." name="Fragment" title="Mali Core Warps" units="warps" />
	<event counter="ARM_Mali-TMIx_FRAG_PARTIAL_WARPS" description="This counter increments for every created fragment warp which contains some helper threads which do not correspond to a hit sample point.&#10;&#10;Partial coverage in a fragment quad will occur if any of its sample points span the edge of a triangle, or if one or more covered sample points fail an early ZS test. Partial coverage in a warp will occur if any of quads it contains have partial coverage." name="Partial Fragment" title="Mali Core Warps" units="warps" />
	<event counter="ARM_Mali-TMIx_FRAG_QUADS_RAST" description="This counter increments for every quad generated by the rasterization phase.&#10;&#10;The quads generated have at least some coverage based on the current sample pattern, but may subsequently be killed by early ZS testing or FPK hidden surface removal before they are shaded. Each 2x2 quad typically covers a 2x2 pixel screen region, but additional quads may be generated if the application is using sample-rate shading." name="Rasterized" title="Mali Core Quads" units="quads" />
	<event counter="ARM_Mali-TMIx_FRAG_QUADS_EZS_TEST" description="This counter increments for every quad undergoing early depth and stencil testing.&#10;&#10;We want as many quads as possible to be subject to early ZS testing as it is significantly more efficient than late ZS testing, which will only kill threads after they have been fragment shaded." name="Early ZS tested" title="Mali Core Quads" units="quads" />
	<event counter="ARM_Mali-TMIx_FRAG_QUADS_EZS_UPDATE" description="This counter increments for every quad undergoing early depth and stencil testing which can update the framebuffer.&#10;&#10;Quads which have a depth value which depends on shader execution, or which have indeterminate coverage due to use of alpha-to-coverage or `discard` statements in the shader, may be early ZS tested but cannot do an early ZS update. Aim to maximize the number of quads capable of doing an early ZS update." name="Early ZS updated" title="Mali Core Quads" units="quads" />
	<event counter="ARM_Mali-TMIx_FRAG_QUADS_EZS_KILL" description="This counter increments for every quad killed by early depth and stencil testing.&#10;&#10;It is common to see a proportion of quads killed at this point in the pipeline, as early ZS is a great technique for handling depth-based occlusion inside the view frustum without needing perfect culling in the application. However if a very high percentage of quads are being killed at this stage it may be indicative that improvements in application culling, such as use of potential visibility sets to cull objects in different rooms, are possible." name="Early ZS killed" title="Mali Core Quads" units="quads" />
	<event counter="ARM_Mali-TMIx_FRAG_LZS_TEST" description="This counter increments for every quad undergoing late depth and stencil testing." name="Late ZS tested" title="Mali Core Quads" units="quads" />
	<event counter="ARM_Mali-TMIx_FRAG_LZS_KILL" description="This counter increments for every quad killed by late depth and stencil testing." name="Late ZS killed" title="Mali Core Quads" units="quads" />
	<event counter="ARM_Mali-TMIx_FRAG_PTILES" description="This counter increments for every tile processed by the shader core.&#10;&#10;Note that tiles are normally 16x16 pixels buy can vary depending on per-pixel storage requirements and the tile buffer size of the current GPU; see {{MaliTIleStorage}} for details. The most accurate way to get a total pixel count rendered by the application is to use the Job Manager {{JS0_TASKS}} counter to derive a pixel count, as it will always count 32x32 pixel regions." name="Tiles" title="Mali Core Tiles" units="tiles" />
	<event counter="ARM_Mali-TMIx_FRAG_TRANS_ELIM" description="This counter increments for every tile killed by a transaction elimination CRC check." name="Killed tiles" title="Mali Core Tiles" units="tiles" />
	<event counter="ARM_Mali-TMIx_QUAD_FPK_KILLER" description="This counter increments for every quad which is a valid occluder for FPK hidden surface removal.&#10;&#10;To be a candidate FPK occluder a quad must be guaranteed to be opaque and resolvable at early ZS; draw calls using blending, shader discard, alpha-to-coverage, programmable depth, or programmable tile buffer access cannot be occluders." name="FPK occluder" title="Mali Core Quads" units="quads" />
	<event counter="ARM_Mali-TMIx_COMPUTE_ACTIVE" description="This counter increments every cycle that the shader core is processing some compute workload.&#10;&#10;Active processing includes any cycle where compute work is running anywhere in the fixed-function front-end or the in the programmable core." name="Compute active" title="Mali Core Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_COMPUTE_TASKS" description="Compute tasks" name="Compute" title="Mali Core Tasks" units="tasks" />
	<event counter="ARM_Mali-TMIx_COMPUTE_WARPS" description="This counter increments for every created compute warp.&#10;&#10;To ensure full utilization of the warp capacity any compute workgroups should be a multiple of warp size.&#10;&#10;!!! Warning&#10;  Note that the warp size can vary based on Mali GPU product." name="Compute" title="Mali Core Warps" units="warps" />
	<event advanced="yes" counter="ARM_Mali-TMIx_COMPUTE_STARVING" description="Compute front-end starvation cycles" name="Compute starvation" title="Mali Core Starvation Cycles" units="cycles" />
	<event counter="ARM_Mali-TMIx_EXEC_CORE_ACTIVE" description="This counter increments every cycle that the programmable core is processing at least one warp.&#10;&#10;Note that this counter does not give any visibility of the total utilization of the functional units inside the shader core, but simply gives an indication that something was running." name="Execution core active" title="Mali Core Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_EXEC_ACTIVE" description="Execution engine active cycles" name="Execution engine active" title="Mali Core Cycles" units="cycles" />
	<event counter="ARM_Mali-TMIx_EXEC_INSTR_COUNT" description="This counter increments for every instruction the execution engine processes per warp. All instructions are single cycle issue." name="Executed" title="Mali Core EE Instructions" units="instructions" />
	<event counter="ARM_Mali-TMIx_EXEC_INSTR_DIVERGED" description="This counter increments for every instruction the execution engine processes per warp where there is control flow divergence across the warp.&#10;&#10;Control flow divergence erodes arithmetic execution efficiency because it implies some threads in the warp will be idle because they did not take the current control path through the code, and so it should be minimized when designing shader effects." name="Diverged" title="Mali Core EE Instructions" units="instructions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_EXEC_INSTR_STARVING" description="Execution engine starvation cycles" name="Execution engine starvation" title="Mali Core Starvation Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_ARITH_INSTR_SINGLE_FMA" description="Arithmetic instructions" name="Arithmetic" title="Mali Core EE Instructions" units="instructions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_ARITH_INSTR_DOUBLE" description="Arithmetic + Arithmetic instructions" name="Dual Arithmetic" title="Mali Core EE Instructions" units="instructions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_ARITH_INSTR_MSG" description="Arithmetic + Message instructions" name="Arithmetic + Message" title="Mali Core EE Instructions" units="instructions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_ARITH_INSTR_MSG_ONLY" description="Message instructions" name="Message" title="Mali Core EE Instructions" units="instructions" />
	<event counter="ARM_Mali-TMIx_TEX_INSTR" description="This counter increments for every thread-width texture operation processed by the texture unit." name="Requests" title="Mali Core Texture Requests" units="instructions" />
	<event counter="ARM_Mali-TMIx_TEX_INSTR_MIPMAP" description="This counter increments for every texture operation which acts on a mipmapped texture resource.&#10;&#10;Mipmapping provides improved texturing quality for 3D scenes, as it provides some pre-filtering for minified texture samples. It also improves performance as it reduces pressure on texture caches. It is highly recommended that mipmapping is used for all texturing operations in a 3D scene that are reading from static input textures." name="Mipmapped data request" title="Mali Core Texture Requests" units="instructions" />
	<event counter="ARM_Mali-TMIx_TEX_INSTR_COMPRESSED" description="This counter increments for every texture operation which acts on a compressed texture resource.&#10;&#10;Lossy texture compression, such as ASTC and ETC, provides a significant reduction in texture size and bandwidth which is good for both performance and reducing memory power consumption. For example, ASTC compressing RGBA data at 4.27 bits per texel provides a 7.5-to-1 compression ratio compared to using uncompressed RGBA8 data. &#10;&#10;Note that this counter excludes textures compressed using AFBC lossless framebuffer compression." name="Compressed data requests" title="Mali Core Texture Requests" units="instructions" />
	<event counter="ARM_Mali-TMIx_TEX_INSTR_3D" description="This counter increments for every texture operation which acts on a 3D texture resource.&#10;&#10;3D filtering is half the performance of 2D filtering." name="Volumetric data requests" title="Mali Core Texture Requests" units="instructions" />
	<event counter="ARM_Mali-TMIx_TEX_INSTR_TRILINEAR" description="This counter increments for every texture operation which uses a trilinear texture filter.&#10;&#10;Trilinear filtering is half the performance of bilinear filtering." name="Trilinear filtered requests" title="Mali Core Texture Requests" units="instructions" />
	<event counter="ARM_Mali-TMIx_TEX_COORD_ISSUE" description="This counter increments for every texture filtering issue cycle.&#10;&#10;Some instructions take more than one cycle due to multi-cycle data access and filtering operations:&#10;&#10;* 2D bilinear filtering takes one cycle.&#10;* 2D trilinear filtering takes two cycles.&#10;* 3D bilinear filtering takes two cycles.&#10;* 3D trilinear filtering takes four cycles.&#10;* Sampling from multi-plane YUV takes one cycle per plane." name="Filtering active" title="Mali Core Texture Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_TEX_COORD_STALL" description="Texture filtering coordinate stall cycles" name="Coordinate stall" title="Mali Core Texture Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_TEX_STARVE_CACHE" description="Texture line fill stall cycles" name="Line fill stall" title="Mali Core Texture Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_TEX_STARVE_FILTER" description="Texture filtering partial data stall cycles" name="Partial data stall" title="Mali Core Texture Cycles" units="cycles" />
	<event counter="ARM_Mali-TMIx_LS_MEM_READ_FULL" description="This counter increments for every full width load/store cache read." name="Full read" title="Mali Core Load/Store Cycles" units="issues" />
	<event counter="ARM_Mali-TMIx_LS_MEM_READ_SHORT" description="This counter increments for every partial width load/store cache read.&#10;&#10;Partial data accesses do not make full use of the load/store cache capability, so efficiency can be improved by merging short accesses together to make fewer larger access requests. This can be encouraged in shader code by using vector data loads, avoiding padding in strided data accesses, and writing compute shaders so adjacent threads in the warp access adjacent addresses in memory." name="Short read" title="Mali Core Load/Store Cycles" units="issues" />
	<event counter="ARM_Mali-TMIx_LS_MEM_WRITE_FULL" description="This counter increments for every full width load/store cache write." name="Full write" title="Mali Core Load/Store Cycles" units="issues" />
	<event counter="ARM_Mali-TMIx_LS_MEM_WRITE_SHORT" description="This counter increments for every partial width load/store cache write.&#10;&#10;Partial data accesses do not make full use of the load/store cache capability, so efficiency can be improved by merging short accesses together to make fewer larger access requests. This can be encouraged in shader code by using vector data loads, avoiding padding in strided data accesses, and writing compute shaders so adjacent threads in the warp access adjacent addresses in memory." name="Short write" title="Mali Core Load/Store Cycles" units="issues" />
	<event counter="ARM_Mali-TMIx_LS_MEM_ATOMIC" description="This counter increments for every load/store atomic access.&#10;&#10;Atomic memory accesses are typically multi-cycle operations per thread in the warp, so they are exceptionally expensive. We recommend minimizing use of atomics in performance critical code." name="Atomic" title="Mali Core Load/Store Cycles" units="issues" />
	<event counter="ARM_Mali-TMIx_VARY_INSTR" description="This counter increments for every warp-width interpolation operation processed by the varying unit." name="Requests" title="Mali Core Varying Requests" units="instructions" />
	<event counter="ARM_Mali-TMIx_VARY_SLOT_32" description="This counter increments for every 32-bit interpolation cycle processed by the varying unit.&#10;&#10;32-bit interpolation is half the performance of 16-bit interpolation, so if content is varying bound and this counter is high consider reducing precision of varying inputs to fragment shaders." name="32-bit interpolator active" title="Mali Core Varying Cycles" units="cycles" />
	<event counter="ARM_Mali-TMIx_VARY_SLOT_16" description="This counter increments for every 16-bit interpolation cycle processed by the varying unit." name="16-bit interpolator active" title="Mali Core Varying Cycles" units="cycles" />
	<event advanced="yes" counter="ARM_Mali-TMIx_ATTR_INSTR" description="Attribute instructions" name="Requests" title="Mali Core Attribute Requests" units="instructions" />
	<event advanced="yes" counter="ARM_Mali-TMIx_ARITH_INSTR_FP_MUL" description="Arithmetic multiplication instructions" name="Using multiplier" title="Mali Core EE Instructions" units="instructions" />
	<event counter="ARM_Mali-TMIx_BEATS_RD_FTC" description="This counter increments for every read beat received by the fixed-function fragment front-end." name="Fragment front-end internal" title="Mali Core Internal Bus Read Beats" units="beats" />
	<event counter="ARM_Mali-TMIx_BEATS_RD_FTC_EXT" description="This counter increments for every read beat received by the fixed-function fragment front-end which required an external memory access due to an L2 cache miss." name="Fragment front-end external" title="Mali Core Internal Bus Read Beats" units="beats" />
	<event counter="ARM_Mali-TMIx_BEATS_RD_LSC" description="This counter increments for every read beat received by the load/store unit." name="Load/store internal" title="Mali Core Internal Bus Read Beats" units="beats" />
	<event counter="ARM_Mali-TMIx_BEATS_RD_LSC_EXT" description="This counter increments for every read beat received by the load/store unit which required an external memory access due to an L2 cache miss." name="Load/store external" title="Mali Core Internal Bus Read Beats" units="beats" />
	<event counter="ARM_Mali-TMIx_BEATS_RD_TEX" description="This counter increments for every read beat received by the texture unit." name="Texture internal" title="Mali Core Internal Bus Read Beats" units="beats" />
	<event counter="ARM_Mali-TMIx_BEATS_RD_TEX_EXT" description="This counter increments for every read beat received by the texture unit which required an external memory access due to an L2 cache miss." name="Texture external" title="Mali Core Internal Bus Read Beats" units="beats" />
	<event advanced="yes" counter="ARM_Mali-TMIx_BEATS_RD_OTHER" description="This counter increments for every read beat due to an unattributed source in the shader core." name="Misc internal" title="Mali Core Internal Bus Read Beats" units="beats" />
	<event counter="ARM_Mali-TMIx_BEATS_WR_LSC" description="This counter increments for every write beat sent by the load/store unit." name="Load/store internal" title="Mali Core Internal Bus Write Beats" units="beats" />
	<event counter="ARM_Mali-TMIx_BEATS_WR_TIB" description="This counter increments for every write beat sent by the tile buffer writeback unit." name="Tile buffer internal" title="Mali Core Internal Bus Write Beats" units="beats" />
	<event advanced="yes" counter="ARM_Mali-TMIx_BEATS_WR_OTHER" description="This counter increments for every write beat due to an unattributed source in the shader core." name="Misc internal" title="Mali Core Internal Bus Write Beats" units="beats" />
</category>